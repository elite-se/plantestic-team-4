modeltype reqres "strict" uses RequestResponsePairs('http://www.example.org/RequestResponsePairs');
modeltype restassured "strict" uses RestAssured('http://www.example.org/RestAssured');

transformation reqres2restassured(in input: reqres, out output: restassured);

main() {
    log('Started transforming RequestResponse pairs to RestAssured');

    assert fatal ( input.rootObjects()[Scenario]->size() = 1 )
                with log('Input does not contain exactly one Scenario');

    input.rootObjects()[Scenario].map scenario2testScenario();
}

mapping Scenario::scenario2testScenario(): TestScenario {
    log('Transforming Scenario to TestScenario');

    testScenarioName := self.scenarioName;
    testroundtrip := self.roundtrip -> map roundtrip2testRoundtrip();
}

 mapping Roundtrip::roundtrip2testRoundtrip(): TestRoundtrip {
     log('Transforming Roundtrip to TestRoundtrip');

     testRoundtripName := self.roundtripName;

     if(self.precondition != null) then {
             precondition := self.precondition;
     } endif;
     requestspecification :=  self.httprequest .map httprequest2requestSpecification();
     responsespecification := self.httpresponse .map httpresponse2responseSpecification();
     id := self.id;
     timeout := self.timeout;
     
     if (id != null) {
     	asyncTestRoundtrip := self.asyncRoundtrip .map roundtrip2testRoundtrip();
     };
}

mapping HttpRequest::httprequest2requestSpecification(): RequestSpecification {
     log('Transforming HTTPRequest to RequestSpecification');

     method := self.httpMethod;
     url := self.url;
     requestdatum := self.httprequestdatum -> map httpRequestDatum2requestdatum();
     receiver := self.receiver;
}

mapping HttpRequestDatum::httpRequestDatum2requestdatum(): RequestDatum {
    log('Transforming HttpRequestDatum to RequestDatum');

    variableName := self.variableName;
    value := self.value;
}

mapping HttpResponse::httpresponse2responseSpecification(): ResponseSpecification {
     log('Transforming HTTPResponse to ResponseSpecification');

     responsedatum := self.httpresponsedatum -> map httpresponsedatum2responsedatum();

     if(self.httpStatus->notEmpty()) {
         statusmatcher := object IsIn {
            value := self.httpStatus;
         };
     };

     var bodyMatcherGroup := new BodyMatcherGroup();
     self.httpresponsedatum->forEach(httpresponsedatum) {
        var bodyMatcher := new BodyMatcher();
        bodyMatcher.matcher := object HasXPath {
                                xPath := httpresponsedatum.xPath;
                              };
        bodyMatcherGroup.bodymatcher += bodyMatcher;
     };
     bodymatchergroup := bodyMatcherGroup;
}

mapping HttpResponseDatum::httpresponsedatum2responsedatum(): ResponseDatum {
     log('Transforming HTTPResponseDatum to ResponseDatum');

     variableName := self.variableName;
     xPath := self.xPath;
}
