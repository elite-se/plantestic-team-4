modeltype restassured "strict" uses RestAssured('http://www.example.org/RestAssured');
modeltype openapi "strict" uses openapi2('http://som.uoc.edu/openapi/2.0.0');

transformation mergeRAOpenAPI(in input: restassured, in inputapi: openapi, out output: restassured);

main() {
log('Started populating Restassured with OpenAPI data');

    assert fatal ( input.rootObjects()[TestScenario]->size() = 1 )
                with log('Input does not contain exactly one TestScenario');

    assert fatal ( inputapi.rootObjects()[API]->size() = 1 )
                with log('Input does not contain exactly one API');

    var rootApi := inputapi.rootObjects()[API]->asSequence()->first();

    input.rootObjects()[TestScenario].map populate(rootApi);
}

mapping TestScenario::populate(rootApi: API) : TestScenario {
	log('Transforming Testscenario');

	testScenarioName := self.testScenarioName;
	testroundtrip := self.testroundtrip -> map roundtrip2testRoundtrip(rootApi);

}

 mapping TestRoundtrip::roundtrip2testRoundtrip(rootApi: API): TestRoundtrip {
     log('Transforming Roundtrip to TestRoundtrip');

     testRoundtripName := self.testRoundtripName;

     if(self.precondition != null) then {
             precondition := self.precondition;
     } endif;

     rootApi.paths->forEach(path) {
    	log(path.relativePath);
     };

     var paths: Collection(Path) := rootApi.paths->select(p|matchesRelative(self.requestspecification.url, p.relativePath));
     var operations: Collection(Operation) := paths.getOperationByHTTPMethod(self.requestspecification.method);

     assert fatal ( not operations->isEmpty() )
                with log('Could not find operation ' + self.requestspecification.url + ' in Swagger API.');
	 assert fatal ( not (operations->size() > 1 ))
				with log('Found more than one operation ' + self.requestspecification.url + ' in Swagger API.');

	 var operation: Operation = operations->asSequence()->first();

     operation.responses->forEach (resp) {
     	log("Response Key: " + resp.key);
     	log("Response Key: " + resp.value.schema.type.toString());
     	resp.value.schema.properties->forEach (prop) {
     		log("   PropName: " + prop.name);
     		log("   PropType: " + prop.schema.type.toString())
     	};
     };

     var xp : Sequence(String);

     operation.responses->forEach (resp) {
     	xp := xp->union(getXPaths("", resp.value.schema));
     };

     xp->forEach(p) {
     	log("Recieved: " + p)
     };

     requestspecification := self.requestspecification;
     responsespecification := self.responsespecification; // .map populateresponseSpecification(self.requestspecification);
}

helper getXPaths(basePath: String, schema: Schema): Sequence(String) {

	// Happens eg. for respones that just have a description
	if (schema = null) {
		return Sequence{};
	};

	if (schema.type.toString() != "object") {
		log("Returning: " + basePath);
		return basePath->asSequence()
	};

	// Is Object recurse
	var coll: Sequence(String);
	if (basePath != "") {
		coll := basePath->asSequence();
	};
	schema.properties->forEach (prop) {
		if (prop.required) {
			coll := coll->union(getXPaths(basePath + "/" + prop.name, prop.schema))
		}
	};

	return coll;
}

helper matchesRelative(url: String, relativePath: String): Boolean {
	var partsUrl : Sequence(String) := url.tokenize("/");
	partsUrl->forEach (v) {
		log("Parts URL " + v);
	};
	var partsPath : Sequence(String) := relativePath.tokenize("/")[String];
	partsPath->forEach (v) {
		log("Parts Path " + v);
	};
	var indices := Sequence{1..partsPath->size()}[Integer];
	if (partsUrl.size() = partsPath.size()) {
		return false
	};
	return indices->forAll(i |
		partsPath->at(i) = partsUrl->at(i)
		or (partsPath->at(i).startsWith("{") and partsPath->at(i).endsWith("}"))
	);
}


mapping ResponseSpecification::populateresponseSpecification(req: RequestSpecification): ResponseSpecification {
     log('Transforming HTTPResponse to ResponseSpecification');

     responsedatum := self.responsedatum;
	 bodymatchergroup := self.bodymatchergroup .map populateBodyMatcherGroup();
}

mapping BodyMatcherGroup::populateBodyMatcherGroup() : BodyMatcherGroup {
	self.bodymatcher->forEach(bodymatcher) {
		bodymatcher.matcher
	}
}
mapping BodyMatcher::populateBodyMatcher(): BodyMatcher {
	
}