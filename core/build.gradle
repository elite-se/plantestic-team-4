buildscript {
    ext.kotlin_version = "1.3.21" // Required for Kotlin integration
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        google()
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version" // Required for Kotlin integration
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version" // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.19"
        classpath "edu.uoc.som.openapi2:edu.uoc.som.openapi2.io:2.2.1-SNAPSHOT"
        classpath "edu.uoc.som.openapi2:edu.uoc.som.openapi2.mm:2.2.1-SNAPSHOT"
    }
}

apply plugin: "kotlin" // Required for Kotlin integration
apply plugin: "jacoco"
apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: "application"

mainClassName = "de.unia.se.plantestic.Main"
sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

jar {
    baseName = "se13-plantestic-team"
    version = "0.1.0"
    manifest {
        attributes "Main-Class": "de.unia.se.plantestic.MainKt"
    }
}

sourceSets{
    main.java.srcDirs += "src/main/kotlin/"
    test.java.srcDirs += "src/test/kotlin/"
}

repositories {
    jcenter()
    google()
    mavenCentral()
    mavenLocal()

    // Most qvt-related packages are hosted on WSO2:
    maven { url "https://maven.wso2.org/nexus/content/groups/wso2-public/" }
    maven { url "https://repo.eclipse.org/content/groups/releases/" }
}

configurations {
    ktlint
}

test {
    useJUnitPlatform()

    afterTest { desc, result ->
        logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.15.0"
    implementation "com.google.guava:guava:28.0-jre"
    implementation "com.github.ajalt:clikt:2.2.0"
    api "com.google.code.gson:gson:2.7"
    api "commons-io:commons-io:2.6"
    api "com.networknt:json-schema-validator:1.0.42"
    api "com.moandjiezana.toml:toml4j:0.4.0"

    // Making qvt work without Eclipse
    implementation "org.eclipse.emf:org.eclipse.emf.common:2.15.0"
    implementation "org.eclipse.emf:org.eclipse.emf.ecore:2.15.0"
    implementation "org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.15.0"
    implementation "org.eclipse:org.eclipse.m2m.qvt.oml:3.4.1.v20150201-1444"
    implementation "org.eclipse:org.eclipse.m2m.qvt.oml.common:3.4.0.v20140306-0649"
    implementation "org.eclipse:org.eclipse.m2m.qvt.oml.cst.parser:3.4.0.v20140429-1120"
    implementation "org.eclipse:org.eclipse.m2m.qvt.oml.ecore.imperativeocl:3.3.0.v20140317-1132"
    implementation "org.eclipse:org.eclipse.m2m.qvt.oml.emf.util:3.4.0.v20140306-0718"
    implementation "org.eclipse.ocl:org.eclipse.ocl:3.4.2.v20140725-2242"
    implementation "org.eclipse.ocl:org.eclipse.ocl.common:1.2.0.v20140610-0641"
    implementation "org.eclipse.ocl:org.eclipse.ocl.ecore:3.3.100.v20140610-0641"
    implementation "org.eclipse.uml2:org.eclipse.uml2.common:2.0.1.v20140910-1354"
    implementation "org.eclipse.uml2:org.eclipse.uml2.types:2.0.0.v20140910-1354"
    implementation "org.eclipse.uml2:org.eclipse.uml2.uml:5.0.1.v20140910-1354"
    implementation "lpg.runtime:lpg.runtime.java:2.0.17.v201004271640"

    // Making Acceleo work without Eclipse
    implementation "org.eclipse.acceleo:org.eclipse.acceleo.engine:3.5.1.201409021433"
    implementation "org.eclipse.acceleo:org.eclipse.acceleo.parser:3.5.1.201409021433"
    implementation "org.eclipse.acceleo:org.eclipse.acceleo.common:3.5.1.201409021433"
    implementation "org.eclipse.acceleo:org.eclipse.acceleo.model:3.5.1.201409021433"
    implementation "org.eclipse.platform:org.eclipse.core.runtime:3.15.200"
    implementation "org.apache.ant:ant:1.8.2"
    implementation "edu.uoc.som.openapi2:edu.uoc.som.openapi2.io:2.2.1-SNAPSHOT"
    implementation "edu.uoc.som.openapi2:edu.uoc.som.openapi2.mm:2.2.1-SNAPSHOT"


    implementation project(":plantuml")

    testImplementation "io.kotlintest:kotlintest-runner-junit5:3.1.7"
    testImplementation "io.mockk:mockk:1.8.9"

    // End-2-End Test
    testImplementation "org.jooq:joor-java-8:0.9.12"
    testImplementation "com.github.tomakehurst:wiremock:2.24.0"

    // Needed for running the dynamically compiled test code (runtime dependencies)
    testRuntimeOnly "org.apache.commons:commons-text:1.7"
    testRuntimeOnly "com.moandjiezana.toml:toml4j:0.7.2"
    testRuntimeOnly "io.rest-assured:rest-assured:3.0.0"
    testRuntimeOnly "javax.xml.bind:jaxb-api:2.3.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.3.1"

    ktlint "com.github.shyiko:ktlint:0.29.0"
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    // To generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.0
            }
        }
    }
}

// To run coverage verification during the build (and fail when appropriate)
check.dependsOn jacocoTestCoverageVerification
// To run ktlint during the build (and fail when appropriate)
check.dependsOn ktlint
